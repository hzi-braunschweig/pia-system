collect-licenses:
  stage: generate
  image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/psa.utils.ci-thirdparty-license-collector:$IMAGE_ID
  cache:
    paths:
      - .npm/
  script:
    - PROJECT_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git checkout -B feature/THIRD_PARTY_LICENSES-update
    - npm ci
    - PUPPETEER_SKIP_DOWNLOAD=1 CYPRESS_INSTALL_BINARY=0 lerna bootstrap --ci -- --cache $(pwd)/.npm --prefer-offline
    - licensecollector -d -f text -t ./THIRD_PARTY_LICENSES .
    - >
      if ! git diff --quiet THIRD_PARTY_LICENSES; then
        git add THIRD_PARTY_LICENSES
        git commit -m "chore: update THIRD_PARTY_LICENSES"
        git push -f ${CI_SERVER_PROTOCOL}://${CI_PROJECT_USER}:${CI_PROJECT_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}/${CI_PROJECT_PATH}.git feature/THIRD_PARTY_LICENSES-update
        # create the merge request to develop
        BODY="{
            \"id\": ${CI_PROJECT_ID},
            \"source_branch\": \"feature/THIRD_PARTY_LICENSES-update\",
            \"target_branch\": \"${CI_COMMIT_BRANCH}\",
            \"remove_source_branch\": true,
            \"title\": \"chore: update THIRD_PARTY_LICENSES\",
            \"assignee_id\":\"${GITLAB_USER_ID}\",
            \"work_in_progress\": false,
            \"merge_when_pipeline_succeeds\": false
        }";
        echo $PROJECT_URL
        curl --fail -X POST ${PROJECT_URL}/merge_requests \
            --header "PRIVATE-TOKEN:${CI_PROJECT_TOKEN}" \
            --header "Content-Type: application/json" \
            --data "${BODY}"
      fi
  needs:
    - job: build-docker
      artifacts: false
  rules:
    - if: $CI_SCHEDULED_TASK == "update_third_party_licenses"
    - if: $CI_SCHEDULED_TASK == "load_test" || $CI_SCHEDULED_TASK == "generate_load_test_data"
      when: never
