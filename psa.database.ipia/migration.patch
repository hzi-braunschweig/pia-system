--- docker-entrypoint.sh	2022-02-24 07:53:44.000000000 +0100
+++ docker-entrypoint.sh	2022-02-24 07:55:23.000000000 +0100
@@ -181,6 +181,53 @@
 	done
 }
 
+# usage: docker_process_update_files [file [file [...]]]
+#    ie: docker_process_update_files /always-initdb.d/*
+# process update files, based on file extensions and permissions
+docker_process_update_files() {
+	# psql here for backwards compatibility "${psql[@]}"
+	psql=( docker_process_sql )
+
+	docker_process_sql -c "CREATE TABLE IF NOT EXISTS db_migrations (name TEXT PRIMARY KEY, date TIMESTAMPTZ NOT NULL);"
+
+	echo
+	local f
+	for f; do
+
+		if [ `docker_process_sql -q -t -c "SELECT * FROM db_migrations WHERE name = '$f';" | wc -w` -ne 0 ]; then
+			if [ ! "${f: -3}" == ".sh" ]; then
+				echo skipping $f - has already been run
+				continue
+			fi
+			echo NOT skipping $f, it has already been run but is a .sh file
+		fi
+
+		case "$f" in
+			*.sh)
+				# https://github.com/docker-library/postgres/issues/450#issuecomment-393167936
+				# https://github.com/docker-library/postgres/pull/452
+				if [ -x "$f" ]; then
+					echo "$0: running $f"
+					"$f"
+				else
+					echo "$0: sourcing $f"
+					. "$f"
+				fi
+				;;
+			*.sql)    echo "$0: running $f"; docker_process_sql -f "$f"; echo ;;
+			*.sql.gz) echo "$0: running $f"; gunzip -c "$f" | docker_process_sql; echo ;;
+			*.sql.xz) echo "$0: running $f"; xzcat "$f" | docker_process_sql; echo ;;
+			*)        echo "$0: ignoring $f" ;;
+		esac
+
+		if [ ! "${f: -3}" == ".sh" ]; then
+			docker_process_sql -q -t -c "INSERT INTO db_migrations (name, date) VALUES ('$f', NOW());"
+		fi
+
+		echo
+	done
+}
+
 # Execute sql script, passed via stdin (or -f flag of pqsl)
 # usage: docker_process_sql [psql-cli-args]
 #    ie: docker_process_sql --dbname=mydb <<<'INSERT ...'
@@ -260,7 +307,7 @@
 
 	# internal start of server in order to allow setup using psql client
 	# does not listen on external TCP/IP and waits until start finishes
-	set -- "$@" -c listen_addresses='' -p "${PGPORT:-5432}"
+	set -- "$@" -c listen_addresses='' -p "${PGPORT:-5432}" -c hba_file=/etc/postgres/pg_hba-temp_server.conf
 
 	PGUSER="${PGUSER:-$POSTGRES_USER}" \
 	pg_ctl -D "$PGDATA" \
@@ -302,6 +349,11 @@
 		# setup data directories and permissions (when run as root)
 		docker_create_db_directories
 		if [ "$(id -u)" = '0' ]; then
+			# copy over the config files as root and chown them for the postgres user
+			rm -rf /config
+			cp -r /tmp_config /config
+			chown -R postgres:postgres /config
+
 			# then restart script as postgres user
 			exec gosu postgres "$BASH_SOURCE" "$@"
 		fi
@@ -316,6 +368,7 @@
 			docker_init_database_dir
 			pg_setup_hba_conf "$@"
 
+			/apply_in_container.sh
 			# PGPASSWORD is required for psql when authentication is required for 'local' connections via pg_hba.conf and is otherwise harmless
 			# e.g. when '--auth=md5' or '--auth-local=md5' is used in POSTGRES_INITDB_ARGS
 			export PGPASSWORD="${PGPASSWORD:-$POSTGRES_PASSWORD}"
@@ -324,9 +377,6 @@
 			docker_setup_db
 			docker_process_init_files /docker-entrypoint-initdb.d/*
 
-			docker_temp_server_stop
-			unset PGPASSWORD
-
 			echo
 			echo 'PostgreSQL init process complete; ready for start up.'
 			echo
@@ -334,7 +384,17 @@
 			echo
 			echo 'PostgreSQL Database directory appears to contain a database; Skipping initialization'
 			echo
+
+			/apply_in_container.sh
+			export PGPASSWORD="${PGPASSWORD:-$POSTGRES_PASSWORD}"
+			docker_temp_server_start "$@"
 		fi
+
+		echo 'running migration scripts'
+		docker_process_update_files /migrations/*
+
+		docker_temp_server_stop
+		unset PGPASSWORD
 	fi
 
 	exec "$@"
