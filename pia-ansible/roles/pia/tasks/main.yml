---
####################################################################################
# generate passwords
####################################################################################

# we have to use separate tasks for each password
# otherwise somehow the passwords are all the same
# (even though thats not the case locally)

- name: Generate postgres password
  set_fact:
    pia_ewpia_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate postgres password
  set_fact:
    pia_ipia_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate postgres password
  set_fact:
    pia_qpia_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate postgres password
  set_fact:
    pia_db_log_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate postgres password
  set_fact:
    pia_db_sormas_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate postgres password
  set_fact:
    pia_db_personaldata_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate postgres password
  set_fact:
    pia_db_authserver_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate messagequeue admin password
  set_fact:
    pia_messagequeue_admin_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate messagequeue app password
  set_fact:
    pia_messagequeue_app_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate keycloak admin password
  set_fact:
    pia_authserver_admin_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate keycloak client secret
  set_fact:
    pia_authserver_proband_management_client_secret: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate keycloak client secret
  set_fact:
    pia_authserver_proband_token_introspection_client_secret: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate keycloak client secret
  set_fact:
    pia_authserver_admin_management_client_secret: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

- name: Generate keycloak client secret
  set_fact:
    pia_authserver_admin_token_introspection_client_secret: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"
  run_once: true

####################################################################################
# check default secrets
####################################################################################

- name: Include default variables
  include_vars:
    file: '{{ role_path }}/defaults/main.yml'
    name: defaults

- name: Check defaultness of secrets
  assert:
    that:
      - pia_deployment_password != defaults.pia_deployment_password
      - pia_sormas_on_pia_password != defaults.pia_sormas_on_pia_password
      - pia_pia_on_sormas_password != defaults.pia_pia_on_sormas_password
      - pia_api_key != defaults.pia_api_key
      - pia_mhh_ftpservice_password != defaults.pia_mhh_ftpservice_password
      - pia_hzi_ftpservice_password != defaults.pia_hzi_ftpservice_password
      - pia_modys_password != defaults.pia_modys_password
      - pia_mail_require_tls == true
    fail_msg: >
      'One of the variables has an undesired value.
      We don't want default secrets or unsecure settings
      to be deployed on production systems!'
    success_msg: 'Variables are non default'

- name: Check complexity of passwords
  assert:
    that:
      - survey_docker_password is complex_enough(minimal_length=1, contains_upper_case=False, contains_digit=False)
      - pia_mail_password is complex_enough(minimal_length=1, contains_upper_case=False, contains_digit=False)
      - pia_deployment_password is complex_enough(minimal_length=1, contains_upper_case=False, contains_digit=False)
      - pia_sormas_on_pia_password is complex_enough(minimal_length=1, contains_upper_case=False, contains_digit=False)
      - pia_pia_on_sormas_password is complex_enough(minimal_length=1, contains_upper_case=False, contains_digit=False)
      - pia_mhh_ftpservice_password is complex_enough(minimal_length=1, contains_upper_case=False, contains_digit=False)
      - pia_hzi_ftpservice_password is complex_enough(minimal_length=1, contains_upper_case=False, contains_digit=False)
      - pia_modys_password is complex_enough(minimal_length=1, contains_upper_case=False, contains_digit=False)
      - pia_api_key is complex_enough(minimal_length=1, contains_upper_case=False, contains_digit=False)
    fail_msg: 'One of passwords are not complex enough'
    success_msg: 'Passwords are good to go!'
  run_once: True

####################################################################################
# cleanup
####################################################################################

#  - name: Stop docker
#    service:
#      name: docker
#      state: stopped

#  - name: Delete old stuff
#    file:
#      path: "{{ item }}"
#      state: absent
#    with_items:
#      - /etc/pia/

####################################################################################
# Install prerequisites
####################################################################################

- name: Install git, python3-setuptools, libselinux-python3
  yum:
    name: ['git-core', 'python3-setuptools', 'libselinux-python3']
    state: installed
  tags:
    - prerequisites
    - internet
    - installation

- name: Update pip3 via command
  command: python3 -m pip install --upgrade pip
  tags:
    - prerequisites
    - internet
    - installation

- name: Install cryptography
  pip:
    name: cryptography
    executable: pip3.6
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tags:
    - prerequisites
    - internet
    - installation

- name: NO PROXY | Install virtualenv
  pip:
    name: virtualenv
    executable: pip3.6
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tags:
    - prerequisites
    - internet
    - installation

- name: Create Symlink for virtualenv
  file:
    src: /usr/local/bin/virtualenv
    dest: /bin/virtualenv
    state: link
  tags:
    - prerequisites
    - installation

- name: Install python module docker-compose
  pip:
    name:
      - docker-compose==1.24.1
    virtualenv: /sormas/venv
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tags:
    - prerequisites
    - internet
    - installation

- name: Check that the /bin/docker-compose exists
  stat:
    path: /bin/docker-compose
  register: docker_compose_result
  tags:
    - prerequisites
    - installation

- name: Create Symlink for docker-compose
  file:
    src: /sormas/venv/bin/docker-compose
    dest: /bin/docker-compose
    state: link
  when: not docker_compose_result.stat.exists
  tags:
    - prerequisites
    - installation

- name: Check that docker-compose in virtualenv exists
  stat:
    path: /sormas/venv/bin/docker-compose
  register: stat_result

- name: Log into registry with virtualenv
  docker_login:
    registry: '{{ pia_docker_registry }}'
    username: '{{ survey_docker_user }}'
    password: '{{ survey_docker_password }}'
  vars:
    ansible_python_interpreter: /sormas/venv/bin/python
  when: docker_host and stat_result.stat.exists
  tags:
    - prerequisites
    - internet
    - installation

- name: Log into registry
  docker_login:
    registry: '{{ pia_docker_registry }}'
    username: '{{ survey_docker_user }}'
    password: '{{ survey_docker_password }}'
  when: docker_host and not stat_result.stat.exists
  tags:
    - prerequisites
    - internet

####################################################################################
# create certificates
####################################################################################

- name: Generate certificates
  include_tasks: generate-certificates.yml

####################################################################################
# Deploy certificates to hosts
####################################################################################

- name: Deploy certificates
  include_tasks: deploy-certificates.yml

####################################################################################
# qpia
####################################################################################

- name: Create sftp-server directory
  file:
    path: '{{ pia_ssh_key_directory }}/sftpservice'
    state: directory
  when: pia_is_qpia
  tags:
    - prerequisites

- name: Generate RSA host key
  command: "ssh-keygen -q -t rsa -b 4096 -f {{ pia_ssh_key_directory }}/sftpservice/ssh_host_rsa_key -C '' -N ''"
  args:
    creates: '{{ pia_ssh_key_directory }}/sftpservice/ssh_host_rsa_key'
  when: pia_is_qpia
  tags:
    - prerequisites

- name: Generate ed25519 host key
  command: "ssh-keygen -q -t ed25519 -f {{ pia_ssh_key_directory }}/sftpservice/ssh_host_ed25519_key -C '' -N ''"
  args:
    creates: '{{ pia_ssh_key_directory }}/sftpservice/ssh_host_ed25519_key'
  when: pia_is_qpia
  tags:
    - prerequisites

- name: Change permission for private key
  file:
    path: '{{ pia_ssh_key_directory }}/sftpservice/{{ item }}'
    state: file
    mode: '0600'
  loop:
    - ssh_host_rsa_key
    - ssh_host_ed25519_key
  when: pia_is_qpia
  tags:
    - prerequisites

- name: Create firebase directory
  file:
    path: '{{ pia_firebase_directory }}'
    state: directory
  when: pia_is_qpia
  tags:
    - prerequisites

- name: Write firebase credentials.json
  copy:
    content: '{{ pia_firebase_credentials }}'
    dest: '{{ pia_firebase_directory }}/credential.json'
  when: pia_is_qpia
  tags:
    - prerequisites

####################################################################################
# common
####################################################################################

#  - name: Start docker
#    service:
#      name: docker
#      state: started
#

####################################################################################
# docker compose
####################################################################################

- name: Docker-compose down (when using virtualenv)
  docker_compose:
    project_src: /root/
    stopped: true
  ignore_errors: yes
  vars:
    ansible_python_interpreter: /sormas/venv/bin/python
  when: docker_host and stat_result.stat.exists

- name: Docker-compose down
  docker_compose:
    project_src: /root/
    stopped: true
  ignore_errors: yes
  when: docker_host and not stat_result.stat.exists

- name: Copy docker-compose.yml
  template:
    src: ./templates/docker-compose.yml.j2
    dest: /root/docker-compose.yml
  when: docker_host

- name: Template env.j2
  template:
    src: ./templates/env.j2
    dest: /root/.env
  when: docker_host

- name: Generate random UUID API_KEY
  lineinfile:
    path: /root/.env
    regexp: '^API_KEY='
    line: "API_KEY={{ (999999999999999999999 | random | string + (lookup('pipe', 'date +%s%N'))) | to_uuid() }}"
  when:
    - docker_host
    - generate_random_key
    - hostvars[inventory_hostname]['PIA_API_KEY'] is not defined

# only on qpia
- name: Template user.conf.j2
  template:
    src: ./templates/users.conf.j2
    dest: /root/users.conf
  when: docker_host and pia_is_qpia

- name: Docker-compose pull (when using virtualenv)
  docker_compose:
    project_src: /root/
    pull: yes
  vars:
    ansible_python_interpreter: /sormas/venv/bin/python
  when: docker_host and stat_result.stat.exists
  tags:
    - internet

- name: Docker-compose up (when using virtualenv)
  docker_compose:
    project_src: /root/
    restarted: true
  vars:
    ansible_python_interpreter: /sormas/venv/bin/python
  when: docker_host and stat_result.stat.exists

- name: Docker-compose pull
  docker_compose:
    project_src: /root/
    pull: yes
  when: docker_host and not stat_result.stat.exists
  tags:
    - internet

- name: Docker-compose up
  docker_compose:
    project_src: /root/
    restarted: true
  when: docker_host and not stat_result.stat.exists

- name: Check that the /root/sormas-pia/docker-compose.yml exists
  stat:
    path: /root/sormas-pia/docker-compose.yml
  register: sormas_pia_result

- name: virtualenv | Restart local reverse proxy for sormas-sb
  docker_compose:
    project_src: /root/sormas-pia
    pull: yes
    restarted: yes
  vars:
    ansible_python_interpreter: /sormas/venv/bin/python
  when: docker_host and sormas_pia_result.stat.exists and stat_result.stat.exists

- name: Restart local reverse proxy for sormas-sb
  docker_compose:
    project_src: /root/sormas-pia
    restarted: yes
  when: docker_host and sormas_pia_result.stat.exists and not stat_result.stat.exists

####################################################################################
# ansible tower
####################################################################################

- name: Get all environments from .env file and register as variable
  shell: "cat /root/.env | grep '^{{ item }}' |  sed -r 's/^{{ item }}=//'"
  with_items:
    - ENABLE_DB_EXPORT
    - ENABLE_DB_IMPORT
    - DEPLOYMENT_USER
    - DEPLOYMENT_PASSWORD
    - EWPIA_PASSWORD
    - IPIA_PASSWORD
    - API_KEY
    - QPIA_PASSWORD
    - MAIL_USER
    - MAIL_PASSWORD
    - MAIL_HOST
    - MAIL_PORT
    - MAIL_REQUIRE_TLS
    - MAIL_FROM_NAME
    - MAIL_FROM_ADDRESS
    - SORMAS_ON_PIA_USER
    - SORMAS_ON_PIA_PASSWORD
    - SORMAS_SERVER_URL
    - PIA_ON_SORMAS_USER
    - PIA_ON_SORMAS_PASSWORD
    - IS_SORMAS_ACTIVE
    - DB_LOG_PASSWORD
    - DB_PERSONALDATA_PASSWORD
    - MHH_FTPSERVICE_PW
    - HZI_FTPSERVICE_PW
  register: pia_environment_vars
  tags:
    - ansible-tower
  when: pia_is_qpia

- name: IPIA | Get all environments from .env file and register as variable
  shell: "cat /root/.env | grep '^{{ item }}' |  sed -r 's/^{{ item }}=//'"
  with_items:
    - IPIA_PASSWORD
    - MODYS_BASE_URL
    - MODYS_USERNAME
    - MODYS_PASSWORD
    - MODYS_STUDY
    - MODYS_IDENTIFIER_TYPE_ID
    - MODYS_REQUEST_CONCURRENCY
  register: ipia_environment_vars
  tags:
    - ansible-tower
  when:
    - pia_multi_host|bool
    - not pia_is_qpia|bool
    - pia_is_ipia|bool
    - not pia_is_ewpia|bool

- name: EWPIA | Get all environments from .env file and register as variable
  shell: "cat /root/.env | grep '^{{ item }}' |  sed -r 's/^{{ item }}=//'"
  with_items:
    - EWPIA_PASSWORD
  register: ewpia_environment_vars
  when:
    - pia_multi_host|bool
    - not pia_is_qpia|bool
    - not pia_is_ipia|bool
    - pia_is_ewpia|bool
  tags:
    - ansible-tower

- name: SORMAS SB | Template new_host_var.yml.j2 to /tmp/
  template:
    src: new_host_var.yml.j2
    dest: '/tmp/new_host_var{{ inventory_hostname }}.yml'
  delegate_to: localhost
  become: no
  when:
    - not pia_multi_host|bool
    - pia_is_qpia|bool
    - pia_is_ipia|bool
    - pia_is_ewpia|bool
  tags:
    - ansible-tower

- name: QPIA | Template new_host_var.yml.j2 to /tmp/
  template:
    src: qpia_host_var.yml.j2
    dest: '/tmp/qpia_host_var{{ inventory_hostname }}.yml'
  delegate_to: localhost
  become: no
  when:
    - pia_multi_host|bool
    - pia_is_qpia|bool
    - not pia_is_ipia|bool
    - not pia_is_ewpia|bool
  tags:
    - ansible-tower

- name: IPIA | Template new_host_var.yml.j2 to /tmp/
  template:
    src: ipia_host_var.yml.j2
    dest: '/tmp/ipia_host_var{{ inventory_hostname }}.yml'
  delegate_to: localhost
  become: no
  when:
    - pia_multi_host|bool
    - not pia_is_qpia|bool
    - pia_is_ipia|bool
    - not pia_is_ewpia|bool
  tags:
    - ansible-tower

- name: EWPIA | Template new_host_var.yml.j2 to /tmp/
  template:
    src: ewpia_host_var.yml.j2
    dest: '/tmp/ewpia_host_var{{ inventory_hostname | default(pia_url) }}.yml'
  delegate_to: localhost
  become: no
  when:
    - pia_multi_host|bool
    - not pia_is_qpia|bool
    - not pia_is_ipia|bool
    - pia_is_ewpia|bool
  tags:
    - ansible-tower

- name: SORMAS-SB | Update hostvars to host
  tower_host:
    name: '{{ inventory_hostname }}'
    validate_certs: no
    inventory: '{{ tower_inventory_name }}'
    state: present
    variables: '@/tmp/new_host_var{{ inventory_hostname }}.yml'
  delegate_to: localhost
  become: no
  when:
    - not pia_multi_host|bool
    - hostvars[inventory_hostname]['PIA_API_ADDRESS'] is defined
  tags:
    - ansible-tower

- name: IPIA | Update hostvars to host
  tower_host:
    name: '{{ inventory_hostname }}'
    validate_certs: no
    inventory: '{{ tower_inventory_name }}'
    state: present
    variables: '@/tmp/ipia_host_var{{ inventory_hostname }}.yml'
  delegate_to: localhost
  become: no
  when:
    - pia_multi_host|bool
    - pia_is_ipia
  tags:
    - ansible-tower

- name: EWPIA | Update hostvars to host
  tower_host:
    name: '{{ inventory_hostname }}'
    validate_certs: no
    inventory: '{{ tower_inventory_name }}'
    state: present
    variables: '@/tmp/ewpia_host_var{{ inventory_hostname }}.yml'
  delegate_to: localhost
  become: no
  when:
    - pia_multi_host|bool
    - pia_is_ewpia
  tags:
    - ansible-tower

- name: QPIA | Update hostvars to host
  tower_host:
    name: '{{ inventory_hostname }}'
    validate_certs: no
    inventory: '{{ tower_inventory_name }}'
    state: present
    variables: '@/tmp/qpia_host_var{{ inventory_hostname }}.yml'
  delegate_to: localhost
  become: no
  when:
    - pia_multi_host|bool
    - pia_is_qpia
  tags:
    - ansible-tower

- name: SORMAS-SB | Add hostvars to new host
  tower_host:
    name: '{{ pia_url }}'
    validate_certs: no
    inventory: '{{ survey_inventory_pia }}'
    state: present
    variables: '@/tmp/new_host_var{{ inventory_hostname | default(pia_url) }}.yml'
  delegate_to: localhost
  become: no
  when:
    - hostvars[inventory_hostname]['PIA_API_ADDRESS'] is not defined
    - pia_is_qpia|bool
    - pia_is_ipia|bool
    - pia_is_ewpia|bool
    - not pia_multi_host|bool
  tags:
    - ansible-tower
